// <auto-generated />
using System;
using FootballMatches.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballMatches.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("FootballMatches.API.Models.Competition", b =>
                {
                    b.Property<string>("CompetitionId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompetitionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CompetitionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("CompetitionId");

                    b.ToTable("Competitions");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Match", b =>
                {
                    b.Property<string>("MatchId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AwayTeamId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompetitionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<int>("DLProviderId")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<string>("HomeTeamId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("MatchDateFixed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("MatchDay")
                        .HasColumnType("int");

                    b.Property<string>("MatchType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("NeutralVenue")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("PlannedKickoffTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StadiumId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("MatchId");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("CompetitionId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("StadiumId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Season", b =>
                {
                    b.Property<string>("SeasonId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CompetitionId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SeasonName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SeasonId");

                    b.HasIndex("CompetitionId")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Stadium", b =>
                {
                    b.Property<string>("StadiumId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StadiumName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("StadiumId");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Team", b =>
                {
                    b.Property<string>("TeamId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Match", b =>
                {
                    b.HasOne("FootballMatches.API.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballMatches.API.Models.Competition", "Competition")
                        .WithMany("Matches")
                        .HasForeignKey("CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballMatches.API.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FootballMatches.API.Models.Stadium", "Stadium")
                        .WithMany("Matches")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AwayTeam");

                    b.Navigation("Competition");

                    b.Navigation("HomeTeam");

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Season", b =>
                {
                    b.HasOne("FootballMatches.API.Models.Competition", "Competition")
                        .WithOne("Season")
                        .HasForeignKey("FootballMatches.API.Models.Season", "CompetitionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Competition");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Competition", b =>
                {
                    b.Navigation("Matches");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Stadium", b =>
                {
                    b.Navigation("Matches");
                });

            modelBuilder.Entity("FootballMatches.API.Models.Team", b =>
                {
                    b.Navigation("AwayMatches");

                    b.Navigation("HomeMatches");
                });
#pragma warning restore 612, 618
        }
    }
}
